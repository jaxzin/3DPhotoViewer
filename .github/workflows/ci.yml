name: CI

on:
  push:
    branches: [master, main]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Use Yarn v1
        run: npm install -g yarn@1
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run unit tests
        run: npm run test:unit
        env:
          JEST_JUNIT_OUTPUT_FILE: ./test-results/unit-junit.xml
      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/unit-junit.xml

  integration:
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Use Yarn v1
        run: npm install -g yarn@1
      - name: Install dependencies
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
        run: yarn install --frozen-lockfile
      - name: Run integration tests
        uses: mujo-code/puppeteer-headful@v2
        env:
          NODE_OPTIONS: --experimental-vm-modules
          JEST_JUNIT_OUTPUT_FILE: ./test-results/integration-junit.xml
        with:
          args: npx jest --ci --reporters=default --testResultsProcessor=./node_modules/jest-junit/index.js test/integration.test.js
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/integration-junit.xml

  build:
    needs: [unit, integration]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Use Yarn v1
        run: npm install -g yarn@1
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Package extension
        run: npx grunt --gruntfile Gruntfile.cjs package
      - name: Upload packaged extension
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: dist/*.zip

  tag_release:
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Use Yarn v1
        run: npm install -g yarn@1
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Bump patch version and tag
        id: bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          npm version patch -m "chore: release %s [skip ci]"
          NEW_TAG="v$(node -p "require('./package.json').version")"
          echo "tag=${NEW_TAG}" >> "$GITHUB_OUTPUT"
          git push --follow-tags

  deploy:
    needs: tag_release
    if: needs.tag_release.outputs.tag != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout release tag
        run: |
          git fetch --tags
          git checkout ${{ needs.tag_release.outputs.tag }}
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Use Yarn v1
        run: npm install -g yarn@1
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Package extension
        run: npx grunt --gruntfile Gruntfile.cjs package
      - name: Publish to Chrome Web Store
        env:
          EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        run: |
          npx chrome-webstore-upload-cli upload \
            --source dist/3DPhotoViewer-$(node -p "require('./package.json').version").zip \
            --extension-id "$EXTENSION_ID" \
            --client-id "$CLIENT_ID" \
            --client-secret "$CLIENT_SECRET" \
            --refresh-token "$REFRESH_TOKEN"
